// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package song

import (
	"context"
)

const deleteSong = `-- name: DeleteSong :exec
DELETE FROM song
WHERE id = $1
`

func (q *Queries) DeleteSong(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSong, id)
	return err
}

const insertSong = `-- name: InsertSong :one
INSERT INTO song (song, group_name, release_date, text, link)
values ($1, $2, $3, $4, $5)
RETURNING id
`

type InsertSongParams struct {
	Song        string
	GroupName   string
	ReleaseDate string
	Text        string
	Link        string
}

func (q *Queries) InsertSong(ctx context.Context, arg *InsertSongParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertSong,
		arg.Song,
		arg.GroupName,
		arg.ReleaseDate,
		arg.Text,
		arg.Link,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const selectSongText = `-- name: SelectSongText :one
SELECT text
FROM song
WHERE id = $1
`

func (q *Queries) SelectSongText(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRow(ctx, selectSongText, id)
	var text string
	err := row.Scan(&text)
	return text, err
}

const updateSong = `-- name: UpdateSong :exec
UPDATE song
SET song = $1,
    group_name = $2,
    release_date = $3,
    text = $4,
    link = $5
WHERE id = $6
`

type UpdateSongParams struct {
	Song        string
	GroupName   string
	ReleaseDate string
	Text        string
	Link        string
	ID          int32
}

func (q *Queries) UpdateSong(ctx context.Context, arg *UpdateSongParams) error {
	_, err := q.db.Exec(ctx, updateSong,
		arg.Song,
		arg.GroupName,
		arg.ReleaseDate,
		arg.Text,
		arg.Link,
		arg.ID,
	)
	return err
}
